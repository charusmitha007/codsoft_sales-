# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14KciVETIwQxiQD4OtMCOSXgjjtob0Crm
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

# Generate synthetic data
np.random.seed(42)
dates = pd.date_range(start='1/1/2020', periods=100)
sales = np.random.poisson(lam=200, size=100) + np.linspace(0, 50, 100)
data = pd.DataFrame({'Date': dates, 'Sales': sales})

# Feature engineering: Create additional features from date
data['DayOfWeek'] = data['Date'].dt.dayofweek
data['Month'] = data['Date'].dt.month
data['DayOfMonth'] = data['Date'].dt.day
data['Year'] = data['Date'].dt.year

# Prepare data for modeling
X = data[['DayOfWeek', 'Month', 'DayOfMonth', 'Year']]
y = data['Sales']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
from sklearn.metrics import mean_squared_error, r2_score
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse:.2f}')
print(f'R^2 Score: {r2:.2f}')

# Plot the results
plt.figure(figsize=(10, 6))
plt.plot(dates, sales, label='Actual Sales')
plt.plot(data['Date'][len(data)-len(y_test):], y_pred, label='Predicted Sales', linestyle='dashed')
plt.legend()
plt.xlabel('Date')
plt.ylabel('Sales')
plt.title('Sales Prediction')
plt.show()

# Example prediction
new_data = pd.DataFrame({
    'DayOfWeek': [2],  # Wednesday
    'Month': [6],      # June
    'DayOfMonth': [15],
    'Year': [2024]
})

predicted_sales = model.predict(new_data)
print(f'Predicted Sales for {new_data.iloc[0]}: {predicted_sales[0]:.2f}')